- hosts: server
  gather_facts: false
  become: false
  run_once: true
  tasks:
  # - name: Cilium L2 | Create the resources
  #   when:
  #   - cilium.l2 is defined
  #   # - cilium.l2.blocks is defined
  #   # block:
  #   # - name: Cilium L2 | Check the required variables
  #   #   assert:
  #   #     fail_msg: cilium_l2_blocks must contain at least one value
  #   #     that:
  #   #     # - cilium.l2.blocks is iterable
  #   #     - cilium.l2.blocks | length > 0

  - name: Cilium L2 | Ingress controller pool
    delegate_to: localhost
    kubernetes.core.k8s:
      wait: true
      state: present
      definition:
        apiVersion: cilium.io/v2alpha1
        kind: CiliumLoadBalancerIPPool
        metadata:
          name: "{{ ippool.ingress_controller.name }}"
          namespace: kube-system
          labels:
            pool: "{{ ippool.ingress_controller.name }}"
        spec:
          blocks: '{{ ippool.ingress_controller.pool }}'
          # serviceSelector:
          #   matchLabels:
          #     serviceType: core

  - name: Cilium L2 | Hubble UI Pool
    delegate_to: localhost
    kubernetes.core.k8s:
      wait: true
      state: present
      definition:
        apiVersion: cilium.io/v2alpha1
        kind: CiliumLoadBalancerIPPool
        metadata:
          name: "{{ ippool.hubble_ui.name }}"
          namespace: kube-system
          labels:
            pool: "{{ ippool.hubble_ui.name }}"
        spec:
          blocks: '{{ ippool.hubble_ui.pool }}'
          # serviceSelector:
          #   matchLabels:
          #     serviceType: core

  - name: Cilium L2 | Create CiliumLoadBalancerIPPool
    delegate_to: localhost
    kubernetes.core.k8s:
      wait: true
      state: present
      definition:
        apiVersion: cilium.io/v2alpha1
        kind: CiliumLoadBalancerIPPool
        metadata:
          name: "{{ ippool.lb.name }}"
          namespace: kube-system
          labels:
            pool: "{{ ippool.lb.name }}"
        spec:
          blocks: "{{ ippool.lb.pool }}"
          # serviceSelector: 
          #   matchLabels:
          #     serviceType: core

  - name: Cilium L2 | Create CiliumL2AnnouncementPolicy
    delegate_to: localhost
    kubernetes.core.k8s:
      wait: true
      state: present
      definition:
        apiVersion: cilium.io/v2alpha1
        kind: CiliumL2AnnouncementPolicy
        metadata:
          name: core-services
          namespace: kube-system
        spec:
          # serviceSelector:
          #   matchLabels:
          #     serviceType: core
          nodeSelector:
            matchExpressions:
            - key: node-role.kubernetes.io/control-plane
              operator: DoesNotExist
          interfaces: ["{{ cilium.interface }}"]
          externalIPs: true
          loadBalancerIPs: true

  - name: Cilium L2 | Get conflicting IPs
    delegate_to: localhost
    register: result
    changed_when: false
    ansible.builtin.shell: kubectl get CiliumLoadBalancerIPPool core-pool-l2 | awk '{print $3}'

  - name: Cilium L2 | Check conficting IPs
    assert:
      fail_msg: Conflicting IPs have been found, please run `kubectl get CiliumLoadBalancerIPPool core-pool-l2 -o yaml | yq .status.conditions`
      that:
      - not "True" in result.stdout_lines

  - name: Cilium L2 | Create Hubble Load Balancer
    when:
    - ippool.hubble_ui.ip
    - ippool.hubble_ui.ip | length > 8
    delegate_to: localhost
    kubernetes.core.k8s:
      wait: true
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          annotations:
            # io.cilium/lb-ipam-ips: '{{ ippool.hubble_ui.ip }}'
            lbipam.cilium.io/ips: '{{ ippool.hubble_ui.ip }}'
          labels:
            app.kubernetes.io/name: hubble-ui
            app.kubernetes.io/part-of: cilium
            k8s-app: hubble-ui
            pool: "{{ ippool.hubble_ui.name }}"
            # serviceType: core 
          name: hubble-ui-cilium
          namespace: kube-system
        spec:
          internalTrafficPolicy: Cluster
          ipFamilies:
          - IPv4
          # ipFamilyPolicy: SingleStack
          # loadBalancerClass: io.cilium/l2-announcer
          ports:
          - name: http
            port: 80
            protocol: TCP
            targetPort: 8081
          selector:
            k8s-app: hubble-ui
          type: LoadBalancer
          externalTrafficPolicy: Cluster
          